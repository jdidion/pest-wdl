/* document structure */
document = { SOI ~ version_kw ~ version ~ document_element+ ~ EOI }
  version = @{ "1" ~ ( "." ~ ASCII_DIGIT+ )+ }
  document_element = _{ import | structdef | task | workflow }
    import = { import_kw ~ simple_string ~ namespace? ~ import_alias* }
      namespace = { as_kw ~ identifier }
      import_alias = { alias_kw ~ identifier ~ as_kw ~ identifier }
    structdef = { struct_kw ~ identifier ~ block_start ~ unbound_declaration* ~ block_end }
    task = { task_kw ~ identifier ~ block_start ~ task_element+ ~ block_end }
      task_element = _{ common_element | bound_declaration | command | runtime }
        command = _{ command_kw ~ ( command_heredoc | command_block ) }
          command_heredoc = ${ left_heredoc ~ command_heredoc_element* ~ right_heredoc }
            command_heredoc_element = _{ 
              command_heredoc_escape_sequence | tilde_placeholder | command_heredoc_literal 
            }
            command_heredoc_escape_sequence = @{ escape ~ ( ">" | "~" | "\\" ) }
            command_heredoc_literal = @{
              ">"{4,} | ( !command_heredoc_literal_exclude ~ ANY )+
            }
              command_heredoc_literal_exclude = _{
                right_heredoc | tilde_placeholder_start | command_heredoc_escape_sequence
              }
          command_block = _{ single_line_command_block | multi_line_command_block }
            command_block_escape_sequence = @{ escape ~ ( "}" | "~" | "$" | "\\" ) }
            single_line_command_block = ${ block_start ~ single_line_command_block_element* ~ block_end }
              single_line_command_block_element = _{
                command_block_escape_sequence | tilde_placeholder | dollar_placeholder |
                single_line_command_block_literal
              }
              single_line_command_block_literal = @{ 
                  ( !single_line_command_block_literal_exclude ~ ANY )+ 
              }
                single_line_command_block_literal_exclude = _{
                  block_end | tilde_placeholder_start | dollar_placeholder_start | 
                  command_block_escape_sequence | NEWLINE
                }
            // Pest parsers are greedy, WDL doesn't require '}' to be escaped within a command 
            // block, and there is no requirement that braces be matched within a command block, 
            // so we must impose the limitation that the end brace is on a line by itself.
            multi_line_command_block = ${ 
              block_start ~ multi_line_command_block_element* ~ multi_line_command_block_end 
            }
              multi_line_command_block_element = _{ 
                command_block_escape_sequence | tilde_placeholder | dollar_placeholder |
                multi_line_command_block_literal
              }
              multi_line_command_block_end = @{ NEWLINE ~ indent* ~ block_end }
              multi_line_command_block_literal = @{ 
                  ( !multi_line_command_block_literal_exclude ~ ANY )+ | "\\"
              }
                multi_line_command_block_literal_exclude = _{
                  tilde_placeholder_start | dollar_placeholder_start | 
                  command_block_escape_sequence | multi_line_command_block_end 
                }
        runtime = { runtime_kw ~ block_start ~ runtime_attribute* ~ block_end }
          runtime_attribute = { identifier ~ kv_sep ~ expression }
    workflow = { 
      workflow_kw ~ identifier ~ block_start ~ ( common_element | workflow_nested_element )* ~ block_end 
    }
      workflow_nested_element = _{ bound_declaration | call | scatter | conditional }
        call = { 
          call_kw ~ qualified_identifier ~ call_alias? ~ ( block_start ~ call_inputs? ~ block_end )? 
        }
          qualified_identifier = { identifier ~ ( field_sep ~ identifier )* }
          call_alias = { as_kw ~ identifier }
          call_inputs = _{ 
            input_kw ~ kv_sep ~ ( call_input ~ ( list_sep ~ call_input )* ~ list_sep? )? 
          }
          call_input = { identifier ~ ( assign ~ expression )? }
        scatter = { 
          scatter_kw ~ group_start ~ identifier ~ in_kw ~ expression ~ group_end ~ 
          block_start ~ workflow_nested_element* ~ block_end 
        }
        conditional = { 
          if_kw ~ group_start ~ expression ~ group_end ~ 
          block_start ~ workflow_nested_element* ~ block_end 
        }

/* elements in common between task and workflow */
common_element = _{ input | output | meta | parameter_meta }
  unbound_declaration = { typedef ~ identifier }
  bound_declaration = { typedef ~ identifier ~ assign ~ expression }
  input = { input_kw ~ block_start ~ ( bound_declaration | unbound_declaration )* ~ block_end }
  output = { output_kw ~ block_start ~ bound_declaration* ~ block_end }
  meta = { meta_kw ~ block_start ~ meta_attribute* ~ block_end }
  parameter_meta = { parameter_meta_kw ~ block_start ~ meta_attribute* ~ block_end }
  meta_attribute = { identifier ~ kv_sep ~ meta_value }
    meta_value = _{ null | boolean | meta_number | simple_string | meta_array | meta_object }
      null = { "null" }
      meta_number = { sign? ~ ( float | int ) }
      meta_array = { 
        list_start ~ ( meta_value ~ ( list_sep ~ meta_value )* ~ list_sep? )? ~ list_end 
      }
      meta_object = { 
        block_start ~ ( meta_object_field ~ ( list_sep ~ meta_object_field )* ~ list_sep? )? ~ block_end 
      }
        meta_object_field = { identifier ~ kv_sep ~ meta_value }

/* types */
typedef = { ( primitive_type | array_type | map_type | pair_type | user_type ) ~ optional? }
  primitive_type = { "Boolean" | "Int" | "Float" | "String" | "File" | "Object" }
  array_type = { array_kw ~ list_start ~ typedef ~ list_end ~ non_empty? }
    non_empty = { "+" }
  map_type = { map_kw ~ list_start ~ typedef ~ list_sep ~ typedef ~ list_end }
  pair_type = { pair_kw ~ list_start ~ typedef ~ list_sep ~ typedef ~ list_end }
  user_type = { identifier }
  optional = { "?" }

/* expressions */
expression = { ternary | disjunction }
  ternary = { if_kw ~ expression ~ then_kw ~ expression ~ else_kw ~ expression }
  disjunction = { conjunction ~ ( or ~ conjunction )* }
    conjunction = { equality ~ ( and ~ equality )* }
      equality = { comparison ~ ( ( eq | ne ) ~ comparison )* }
        comparison = { math1 ~ ( ( gte | lte | gt | lt ) ~ math1 )* }
          math1 = { math2 ~ ( ( add | sub ) ~ math2 )* }
            math2 = { unary ~ ( ( mul | div | rem ) ~ unary )* }
              unary = { ( sign | not )? ~ access }
                access = { ( apply | primary ) ~ ( index | field )* }
                  index = { list_start ~ expression ~ list_end }
                  field = { field_sep ~ identifier }
                  apply = { identifier ~ 
                      group_start ~ ( expression ~ ( list_sep ~ expression )* ~ list_sep? )? ~ group_end 
                  }
                  primary = _{ literal | identifier | group }
                    literal = _{ none | boolean | float | int | string | pair | array | map | object }
                      none = { "None" }
                      string = _{ squote_string | dquote_string }
                        tilde_placeholder = !{ tilde_placeholder_start ~ expression ~ block_end }
                        dollar_placeholder = !{ dollar_placeholder_start ~ expression ~ block_end }
                        squote_string = ${ squote ~ squote_string_part* ~ squote }
                          squote_string_part = _{
                            squote_escape_sequence | tilde_placeholder | dollar_placeholder | squote_literal 
                          }
                            squote_escape_sequence = @{ 
                              escape ~ ( "'" | "n" | "t" | "~" | "$" | "\\" | number_escape_sequence ) 
                            }
                            squote_literal = @{ ( !squote_literal_exclude ~ ANY )+ }
                              squote_literal_exclude = _{
                                squote | tilde_placeholder_start | dollar_placeholder_start | escape | NEWLINE
                              }
                        dquote_string = ${ dquote ~ dquote_string_part* ~ dquote }
                          dquote_string_part = _{
                            dquote_escape_sequence | tilde_placeholder | dollar_placeholder | dquote_literal 
                          }
                            dquote_escape_sequence = @{ 
                              escape ~ ( "\"" | "n" | "t" | "~" | "$" | "\\" | number_escape_sequence ) 
                            }
                            dquote_literal = @{ ( !dquote_literal_exclude ~ ANY )+ }
                              dquote_literal_exclude = _{
                                dquote | tilde_placeholder_start | dollar_placeholder_start | escape | NEWLINE
                              }
                      pair = { group_start ~ expression ~ list_sep ~ expression ~ group_end }
                      array = { 
                        list_start ~ ( expression ~ ( list_sep ~ expression )* ~ list_sep? )? ~ list_end 
                      }
                      map = { 
                        block_start ~ ( map_entry ~ ( list_sep ~ map_entry )* ~ list_sep? )? ~ block_end 
                      }
                        map_entry = { expression ~ kv_sep ~ expression }
                      object = { 
                        identifier ~ block_start ~ 
                        ( object_field ~ ( list_sep ~ object_field )* ~ list_sep? )? ~ block_end 
                      }
                        object_field = { identifier ~ kv_sep ~ expression }
                    group = { group_start ~ expression ~ group_end }
                
                
/* primitive literals */
identifier = @{ ASCII_ALPHA ~ ( ASCII_ALPHANUMERIC | "_" )* }
boolean = { "true" | "false" }
float = @{ 
  ( "." ~ ASCII_DIGIT+ ~ exponent? ) |
  ( ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* ~ exponent? ) |
  ( ASCII_DIGIT+ ~ exponent )
}
  exponent = { ^"e" ~ sign? ~ ASCII_DIGIT+ }
int = _{ hex_int | oct_int | dec_int }
  hex_int = @{ "0" ~ ^"x" ~ ASCII_HEX_DIGIT+ }
  oct_int = @{ "0" ~ ASCII_OCT_DIGIT+ }
  dec_int = @{ "0" | ( ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ) }
simple_string = _{ simple_squote_string | simple_dquote_string }
  number_escape_sequence = @{
    ( "u" ~ ASCII_HEX_DIGIT{4} ) |
    ( "U" ~ ASCII_HEX_DIGIT{8} ) |
    ( "x" ~ ASCII_HEX_DIGIT{2} ) |
    ASCII_OCT_DIGIT{1,3}
  }
  simple_squote_string = ${ 
    squote ~ ( simple_squote_escape_sequence | simple_squote_literal )* ~ squote 
  }
    simple_squote_escape_sequence = @{ escape ~ ( "'" | "t" | "n" | "\\" | number_escape_sequence ) }
    simple_squote_literal = @{ ( !( squote | escape | NEWLINE ) ~ ANY )+ }
  simple_dquote_string = ${ 
    dquote ~ ( simple_dquote_escape_sequence | simple_dquote_literal )* ~ dquote 
  }
    simple_dquote_escape_sequence = @{ escape ~ ( "\"" | "t" | "n" | "\\" | number_escape_sequence ) }
    simple_dquote_literal = @{ ( !( dquote | escape | NEWLINE ) ~ ANY )+ }

/* keywords */
alias_kw = _{ "alias" }
array_kw = _{ "Array" }
as_kw = _{ "as" }
call_kw = _{ "call" }
command_kw = _{ "command" }
else_kw = _{ "else" }
if_kw = _{ "if" }
in_kw = _{ "in" }
import_kw = _{ "import" }
input_kw = _{ "input" }
map_kw = _{ "Map" }
meta_kw = _{ "meta" }
output_kw = _{ "output" }
pair_kw = _{ "Pair" }
parameter_meta_kw = _{ "parameter_meta" }
runtime_kw = _{ "runtime" }
scatter_kw = _{ "scatter" }
struct_kw = _{ "struct" }
task_kw = _{ "task" }
then_kw = _{ "then" }
version_kw = _{ "version" }
workflow_kw = _{ "workflow" }

/* operators */
or = { "||" }
and = { "&&" }
eq = { "==" }
ne = { "!=" }
gte = { ">=" }
gt = { ">" }
lte = { "<=" }
lt = { "<" }
add = { "+" }
sub = { "-" }
mul = { "*" }
div = { "/" }
rem = { "%" }
not = { "!" }
sign = _{ pos | neg }
pos = { "+" }
neg = { "-" }

/* hidden symbols */
assign = _{ "=" }
field_sep = _{ "." }
block_start = _{ "{" }
block_end = _{ "}" }
kv_sep = _{ ":" }
group_start = _{ "(" }
group_end = _{ ")" }
list_start = _{ "[" }
list_end = _{ "]" }
list_sep = _{ "," }
left_heredoc = _{ "<<<" }
right_heredoc = _{ ">>>" }
squote = _{ "'" }
dquote = _{ "\"" }
escape = _{ "\\" }
tilde_placeholder_start = _{ "~{" }
dollar_placeholder_start = _{ "${" }

/* comments/whitespace */
// comment-text is non-silent because we want to retain comments in the AST
COMMENT = @{ "#" ~ ( !NEWLINE ~ ANY )* ~ &( NEWLINE | EOI ) }
WHITESPACE = _{ indent | NEWLINE }
  indent = { " " | "\t" }
